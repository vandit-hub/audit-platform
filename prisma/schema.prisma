generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AUDITOR
  AUDITEE
  GUEST
}

enum UserStatus {
  ACTIVE
  INVITED
  DISABLED
}

enum EntityType {
  USER
  AUDIT
  OBSERVATION
  ATTACHMENT
  APPROVAL
  ACTION_PLAN
  PLANT
  INVITE
}

enum AuditStatus {
  PLANNED
  IN_PROGRESS
  SUBMITTED
  SIGNED_OFF
}

enum Process {
  O2C
  P2P
  R2R
  INVENTORY
}

enum RiskCategory {
  A
  B
  C
}

enum ChecklistItemStatus {
  PENDING
  DONE
}

/* ===== Phase 3 enums ===== */

enum LikelyImpact {
  LOCAL
  ORG_WIDE
}

enum ObservationStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum ReTestResult {
  PASS
  FAIL
}

enum ApprovalStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum AttachmentKind {
  ANNEXURE
  MGMT_DOC
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  name            String?
  passwordHash    String
  role            Role            @default(AUDITOR)
  status          UserStatus      @default(ACTIVE)
  lastLoginAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  invited         GuestInvite[]   @relation("InvitedBy")
  redeemedInvites GuestInvite[]   @relation("RedeemedBy")
  events          AuditEvent[]
  createdAudits   Audit[]         @relation("AuditCreatedBy")
  assignments     AuditAssignment[]
  // Phase 3
  createdObservations Observation[] @relation("ObservationCreatedBy")
  notes            RunningNote[]
  approvals        Approval[]
}

model Plant {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  applicableChecklist ChecklistApplicability[]
  audits              Audit[]
  observations        Observation[]
}

model AuditEvent {
  id         String     @id @default(cuid())
  entityType EntityType
  entityId   String
  action     String
  diff       Json?
  actorId    String?
  actor      User?      @relation(fields: [actorId], references: [id])
  createdAt  DateTime   @default(now())

  @@index([entityType, entityId])
  @@index([createdAt])
}

model GuestInvite {
  id           String    @id @default(cuid())
  email        String
  role         Role      @default(GUEST)
  token        String    @unique
  scope        Json?
  expiresAt    DateTime
  invitedById  String?
  invitedBy    User?     @relation("InvitedBy", fields: [invitedById], references: [id])
  redeemedById String?
  redeemedBy   User?     @relation("RedeemedBy", fields: [redeemedById], references: [id])
  redeemedAt   DateTime?
  createdAt    DateTime  @default(now())

  @@index([email])
  @@index([expiresAt])
}

/* ============ Phase 2 (existing) ============ */

model Audit {
  id               String        @id @default(cuid())
  plantId          String
  plant            Plant         @relation(fields: [plantId], references: [id])
  startDate        DateTime?
  endDate          DateTime?
  visitDetails     String?
  reportSubmittedAt DateTime?
  signOffAt        DateTime?
  status           AuditStatus   @default(PLANNED)
  createdById      String
  createdBy        User          @relation("AuditCreatedBy", fields: [createdById], references: [id])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  assignments      AuditAssignment[]
  auditChecklists  AuditChecklist[]
  observations     Observation[]
}

model AuditAssignment {
  id         String  @id @default(cuid())
  auditId    String
  audit      Audit   @relation(fields: [auditId], references: [id], onDelete: Cascade)
  auditorId  String
  auditor    User    @relation(fields: [auditorId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([auditId, auditorId])
}

model Checklist {
  id            String           @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime         @default(now())

  items         ChecklistItem[]
  applicable    ChecklistApplicability[]
  auditLinks    AuditChecklist[]
}

model ChecklistItem {
  id            String        @id @default(cuid())
  checklistId   String
  checklist     Checklist     @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  title         String
  description   String?
  riskCategory  RiskCategory?
  process       Process?
  isMandatory   Boolean       @default(false)
  createdAt     DateTime      @default(now())
}

model ChecklistApplicability {
  id           String     @id @default(cuid())
  checklistId  String
  plantId      String
  checklist    Checklist  @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  plant        Plant      @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@unique([checklistId, plantId])
}

model AuditChecklist {
  id           String      @id @default(cuid())
  auditId      String
  checklistId  String
  audit        Audit       @relation(fields: [auditId], references: [id], onDelete: Cascade)
  checklist    Checklist   @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())

  items        AuditChecklistItem[]

  @@unique([auditId, checklistId])
}

model AuditChecklistItem {
  id                 String               @id @default(cuid())
  auditChecklistId   String
  auditChecklist     AuditChecklist       @relation(fields: [auditChecklistId], references: [id], onDelete: Cascade)
  checklistItemId    String
  title              String
  status             ChecklistItemStatus  @default(PENDING)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([auditChecklistId])
}

/* ============ Phase 3 ============ */

model Observation {
  id            String           @id @default(cuid())
  auditId       String
  audit         Audit            @relation(fields: [auditId], references: [id], onDelete: Cascade)
  plantId       String
  plant         Plant            @relation(fields: [plantId], references: [id])
  createdById   String
  createdBy     User             @relation("ObservationCreatedBy", fields: [createdById], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  observationText  String
  risksInvolved    String?
  riskCategory     RiskCategory?
  likelyImpact     LikelyImpact?
  concernedProcess Process?

  auditorPerson        String?
  auditeePersonTier1   String?
  auditeePersonTier2   String?

  auditeeFeedback             String?
  hodActionPlan               String?
  targetDate                  DateTime?
  personResponsibleToImplement String?
  currentStatus               ObservationStatus @default(PENDING)

  implementationDate DateTime?
  reTestResult       ReTestResult?

  approvalStatus   ApprovalStatus @default(DRAFT)
  isPublished      Boolean        @default(false)

  lockedFields     Json? // array of field names to lock (["observationText", "riskCategory", ...])

  attachments      ObservationAttachment[]
  approvals        Approval[]
  notes            RunningNote[]
  actionPlans      ActionPlan[]

  @@index([plantId])
  @@index([approvalStatus, isPublished])
}

model ObservationAttachment {
  id            String          @id @default(cuid())
  observationId String
  observation   Observation     @relation(fields: [observationId], references: [id], onDelete: Cascade)
  kind          AttachmentKind
  key           String
  fileName      String
  contentType   String?
  size          Int?
  createdAt     DateTime        @default(now())
}

model Approval {
  id            String          @id @default(cuid())
  observationId String
  observation   Observation     @relation(fields: [observationId], references: [id], onDelete: Cascade)
  status        ApprovalStatus
  comment       String?
  actorId       String
  actor         User            @relation(fields: [actorId], references: [id])
  createdAt     DateTime        @default(now())

  @@index([observationId, status])
}

model RunningNote {
  id            String      @id @default(cuid())
  observationId String
  observation   Observation @relation(fields: [observationId], references: [id], onDelete: Cascade)
  actorId       String
  actor         User        @relation(fields: [actorId], references: [id])
  text          String
  createdAt     DateTime    @default(now())

  @@index([observationId, createdAt])
}

model ActionPlan {
  id            String      @id @default(cuid())
  observationId String
  observation   Observation @relation(fields: [observationId], references: [id], onDelete: Cascade)
  plan          String
  owner         String?
  targetDate    DateTime?
  status        String?     // simple text status for MVP
  createdAt     DateTime    @default(now())
}